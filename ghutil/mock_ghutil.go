// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: ghutil.go

package ghutil

import (
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
)

// Mock of OrganizationsService interface
type MockOrganizationsService struct {
	ctrl     *gomock.Controller
	recorder *_MockOrganizationsServiceRecorder
}

// Recorder for MockOrganizationsService (not exported)
type _MockOrganizationsServiceRecorder struct {
	mock *MockOrganizationsService
}

func NewMockOrganizationsService(ctrl *gomock.Controller) *MockOrganizationsService {
	mock := &MockOrganizationsService{ctrl: ctrl}
	mock.recorder = &_MockOrganizationsServiceRecorder{mock}
	return mock
}

func (_m *MockOrganizationsService) EXPECT() *_MockOrganizationsServiceRecorder {
	return _m.recorder
}

// Mock of RepositoriesService interface
type MockRepositoriesService struct {
	ctrl     *gomock.Controller
	recorder *_MockRepositoriesServiceRecorder
}

// Recorder for MockRepositoriesService (not exported)
type _MockRepositoriesServiceRecorder struct {
	mock *MockRepositoriesService
}

func NewMockRepositoriesService(ctrl *gomock.Controller) *MockRepositoriesService {
	mock := &MockRepositoriesService{ctrl: ctrl}
	mock.recorder = &_MockRepositoriesServiceRecorder{mock}
	return mock
}

func (_m *MockRepositoriesService) EXPECT() *_MockRepositoriesServiceRecorder {
	return _m.recorder
}

func (_m *MockRepositoriesService) Get(owner string, repo string) (*github.Repository, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", owner, repo)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockRepositoriesServiceRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockRepositoriesService) List(user string, opt *github.RepositoryListOptions) ([]*github.Repository, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "List", user, opt)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockRepositoriesServiceRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List", arg0, arg1)
}

// Mock of IssuesService interface
type MockIssuesService struct {
	ctrl     *gomock.Controller
	recorder *_MockIssuesServiceRecorder
}

// Recorder for MockIssuesService (not exported)
type _MockIssuesServiceRecorder struct {
	mock *MockIssuesService
}

func NewMockIssuesService(ctrl *gomock.Controller) *MockIssuesService {
	mock := &MockIssuesService{ctrl: ctrl}
	mock.recorder = &_MockIssuesServiceRecorder{mock}
	return mock
}

func (_m *MockIssuesService) EXPECT() *_MockIssuesServiceRecorder {
	return _m.recorder
}

func (_m *MockIssuesService) AddLabelsToIssue(owner string, repo string, number int, labels []string) ([]*github.Label, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "AddLabelsToIssue", owner, repo, number, labels)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockIssuesServiceRecorder) AddLabelsToIssue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddLabelsToIssue", arg0, arg1, arg2, arg3)
}

func (_m *MockIssuesService) CreateComment(owner string, repo string, number int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "CreateComment", owner, repo, number, comment)
	ret0, _ := ret[0].(*github.IssueComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockIssuesServiceRecorder) CreateComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateComment", arg0, arg1, arg2, arg3)
}

func (_m *MockIssuesService) GetLabel(owner string, repo string, name string) (*github.Label, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "GetLabel", owner, repo, name)
	ret0, _ := ret[0].(*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockIssuesServiceRecorder) GetLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLabel", arg0, arg1, arg2)
}

func (_m *MockIssuesService) ListLabelsByIssue(owner string, repo string, number int, opt *github.ListOptions) ([]*github.Label, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "ListLabelsByIssue", owner, repo, number, opt)
	ret0, _ := ret[0].([]*github.Label)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockIssuesServiceRecorder) ListLabelsByIssue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListLabelsByIssue", arg0, arg1, arg2, arg3)
}

func (_m *MockIssuesService) RemoveLabelForIssue(owner string, repo string, number int, label string) (*github.Response, error) {
	ret := _m.ctrl.Call(_m, "RemoveLabelForIssue", owner, repo, number, label)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIssuesServiceRecorder) RemoveLabelForIssue(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveLabelForIssue", arg0, arg1, arg2, arg3)
}

// Mock of PullRequestsService interface
type MockPullRequestsService struct {
	ctrl     *gomock.Controller
	recorder *_MockPullRequestsServiceRecorder
}

// Recorder for MockPullRequestsService (not exported)
type _MockPullRequestsServiceRecorder struct {
	mock *MockPullRequestsService
}

func NewMockPullRequestsService(ctrl *gomock.Controller) *MockPullRequestsService {
	mock := &MockPullRequestsService{ctrl: ctrl}
	mock.recorder = &_MockPullRequestsServiceRecorder{mock}
	return mock
}

func (_m *MockPullRequestsService) EXPECT() *_MockPullRequestsServiceRecorder {
	return _m.recorder
}

func (_m *MockPullRequestsService) List(owner string, repo string, opt *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "List", owner, repo, opt)
	ret0, _ := ret[0].([]*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockPullRequestsServiceRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List", arg0, arg1, arg2)
}

func (_m *MockPullRequestsService) ListCommits(owner string, repo string, number int, opt *github.ListOptions) ([]*github.RepositoryCommit, *github.Response, error) {
	ret := _m.ctrl.Call(_m, "ListCommits", owner, repo, number, opt)
	ret0, _ := ret[0].([]*github.RepositoryCommit)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockPullRequestsServiceRecorder) ListCommits(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCommits", arg0, arg1, arg2, arg3)
}
